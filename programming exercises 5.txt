1. Perl allows both static and a kind of dynamic scoping. Write a Perl program that uses both and clearly shows the difference in effect of the two. Explain clearly the difference between the dynamic scoping described in 
this chapter and that implemented in Perl.

$var = "Global";

sub inner {
    print "inner:         $var\n";
}

sub changelocal {
    my $var = "Local";                      indica que utilizara una variable local
    print "changelocal:   $var\n";

    &inner
}

sub changedynamic {
    local $var = "Dynamic";                 indica que utilizara la variable global declarada
    print "changedynamic: $var\n";

    &inner
}

&inner
&changedynamic
&changelocal

bota:

inner:         Global
changedynamic: Dynamic
inner:         Dynamic
changelocal:   Local
inner:         Global

En el ambito dinamico como se vio fue que permite cambiar los tipos de valores dentro de una funcion o ambito y si alguna otra llamada a funcion esta dentro de este, tambien los valores se ven alterados.


2. Write a Common LISP program that clearly shows the difference  between static and dynamic scoping.

> (set 'estatico 5) 
> (defun check-estatico () estatico)
> (check-estatico)    									# imprime el valor 5 
> (let ((estatico 6)) (check-estatico))  				# modifica el valor de estatico de 5 a 6
> (check-estatico)    									# imprime el valor 5

> (defvar *dinamico* 5) 
> (defun check-dinamico () *dinamico*)
> (check-dinamico)    									# imprime el valor 5 
> (let ((*dinamico* 6)) (check-dinamico))  				# modifica el valor de estatico de 5 a 6
> (check-dinamico)    									# imprime el valor 6

dentro de un ambito dinamico permite la modificacion de las variables globales. Para eso utiliza la palabra "defvar" y utiliza asteriscos "*" para declarar esas variables

3.  Write a JavaScript script that has subprograms nested three deep and in which each nested subprogram references variables defined in all of its enclosing subprograms.

function add() {
    var counter = 0;                
    var counter2 = 10;
    var counter3 = 100;
    function plus()
    {
      counter += 1;
      function minus()
      {
        
        counter2 -= 1;
      }
    }
	counter3 += 1000;
    return counter3;
}

var t = add();
print (t); //1100

dentro de cada funcion anidada dentro de la funcion principal (add) se llama a las variables declaradas en esta.


4. Repeat Programming Exercise 3 with Python.

def add():
    counter = 0
    counter2 = 10
    counter3 = 1000
    def plus():
        counter += 1
        def minus():
            counter2 -= 1
        counter3 = counter3 + 100
    return counter3

a = add()
print a

A diferencia del ejercicio anterior hecho en javascript, el codigo ejecutado en python no reconoce la variables declaradas en los ambitos de funciones fuera de uno de manera implicita, por lo que se debe utilizar la palabra global para que esta reconozca variables declaradas fuera de un ambito.

5. Write a C function that includes the following sequence of statements:

x = 21;
int x;
x = 42;

int x;
void fun()
{
    x = 21;
    int x;
    x = 42;
}

6. Write test programs in C++, Java, and C# to determine the scope of a variable declared in a for statement. Specifically, the code must determine whether such a variable is visible after the body of the for statement.

C++:

void fun()
{
	for(int i = 0; i < 100; i++)
		bool var = false;
		
	if(var) cout << "true";
	else cout << "false";
}

error: ‘var’ undeclared. 

Java:

public void fun()
{
	for(int i = 0; i < 100; i++)
		Bodolean var = false;
		
	if(var) System.out.println("true");
	else System.out.println("false");
}

error: class, interface, or enum expected

C#:

class Program
{
    static void Main()
    {
        bool var = false;
        for(int i = 0; i < 100; i++)
		    var = true;
		
    	if(var)  Console.WriteLine("true");
    	else  Console.WriteLine("false");
    }
}

7. Write three functions in C or C++: one that declares a large array statically, one that declares the same large array on the stack, and one that creates the same large array from the heap. Call each of the subprograms a large number of times (at least 100,000) and output the time required by each. Explain the results.

void estatico()
{
    int static v[666];
}

void pila()
{
    int v[666];
}

void heap()
{
    new int v[666];
}

1:
int main()
{

    for (int i = 0; i < 100000; i++)
        estatico();
		
	return 0;
}

2:
int main()
{

    for (int i = 0; i < 100000; i++)
        pila();
		
	return 0;
}

3:
int main()
{

    for (int i = 0; i < 100000; i++)
        heap();
		
	return 0;
}

1: 0.016 segundos
2: 0.047 segundos
3: 0.234 segundos

En el 1er caso, toma menos tiempo ya que solo se almacena el indice primero de todo el vector, porque los valores dentro de este vector nunca seran modificados.
En el 2do caso, toma mas tiempo a diferencia del 1ro debido a que aqui si puede existir alguna modificacion en cualquier posicion del vector, por lo tanto se debe almacenar cada indice del vector en caso se quieran modificar.
En el 3er caso, toma mas tiempo que los anteriores porque se almacenará las variables en tiempo de ejecución, y en la memoria RAM, y a diferencia del 2do caso este no se almacena en una estructura de datos por lo que se separa en la RAM la posicion donde se encuentra el vector, el indice del vector, y cada posición que contiene el vector.
