1. Perl allows both static and a kind of dynamic scoping. Write a Perl program that uses both and clearly shows the difference in effect of the two. Explain clearly the difference between the dynamic scoping described in 
this chapter and that implemented in Perl.

$var = "Global";

sub inner {
    print "inner:         $var\n";
}

sub changelocal {
    my $var = "Local";                      indica que utilizara una variable local
    print "changelocal:   $var\n";

    &inner
}

sub changedynamic {
    local $var = "Dynamic";                 indica que utilizara la variable global declarada
    print "changedynamic: $var\n";

    &inner
}

&inner
&changedynamic
&changelocal

bota:

inner:         Global
changedynamic: Dynamic
inner:         Dynamic
changelocal:   Local
inner:         Global

En el ambito dinamico como se vio fue que permite cambiar los tipos de valores dentro de una funcion o ambito y si alguna otra llamada a funcion esta dentro de este, tambien los valores se ven alterados.


2. Write a Common LISP program that clearly shows the difference  between static and dynamic scoping.

> (set 'estatico 5) 
> (defun check-estatico () estatico)
> (check-estatico)    									# imprime el valor 5 
> (let ((estatico 6)) (check-estatico))  				# modifica el valor de estatico de 5 a 6
> (check-estatico)    									# imprime el valor 5

> (defvar *dinamico* 5) 
> (defun check-dinamico () *dinamico*)
> (check-dinamico)    									# imprime el valor 5 
> (let ((*dinamico* 6)) (check-dinamico))  				# modifica el valor de estatico de 5 a 6
> (check-dinamico)    									# imprime el valor 6

dentro de un ambito dinamico permite la modificacion de las variables globales. Para eso utiliza la palabra "defvar" y utiliza asteriscos "*" para declarar esas variables

3.  Write a JavaScript script that has subprograms nested three deep and in which each nested subprogram references variables defined in all of its enclosing subprograms.

function add() {
    var counter = 0;                
    var counter2 = 10;
    var counter3 = 100;
    function plus()
    {
      counter += 1;
      function minus()
      {
        
        counter2 -= 1;
      }
    }
	counter3 += 1000;
    return counter3;
}

var t = add();
print (t); //1100

dentro de cada funcion anidada dentro de la funcion principal (add) se llama a las variables declaradas en esta.


4. Repeat Programming Exercise 3 with Python.

def add():
    counter = 0
    counter2 = 10
    counter3 = 1000
    def plus():
        counter += 1
        def minus():
            counter2 -= 1
        counter3 = counter3 + 100
    return counter3

a = add()
print a

A diferencia del ejercicio anterior hecho en javascript, el codigo ejecutado en python no reconoce la variables declaradas en los ambitos de funciones fuera de uno de manera implicita, por lo que se debe utilizar la palabra global para que esta reconozca variables declaradas fuera de un ambito.

5. Write a C function that includes the following sequence of statements:

x = 21;
int x;
x = 42;


