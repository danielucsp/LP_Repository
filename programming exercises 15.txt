1. Write a Scheme function that computes the volume of a sphere, given its radius.
(define pi 3.1416)

(define (vol_esfera r)
 (*(/ 4 3) pi (expt r 3)))
 
 2. Write a Scheme function that computes the real roots of a given quadratic equation. If the roots are complex, the function must display a message indicating that. This function must use an IF function. The three parameters to the function are the three coefficients of the quadratic equation.
(define real    
            (lambda (a b c)
                            if (= (- (expt b 2) (* 4 a c)) 0
                                (/ -b (* 2 a))
                                if(> (- (expt b 2) (* 4 a c)) 0
                                    (values (/ (+ -b (sqrt - (expt b 2) (* 4 a c))) (* 2 a))
                                            (/ (- -b (sqrt - (expt b 2) (* 4 a c))) (* 2 a)))
                                    (write "la discriminante es negativa y tiene raices complejas")))))
                                    
3. Repeat Programming Exercise 2 using a COND function, rather than an IF function.
(define real    
            (lambda (a b c)
                            cond (= (- (expt b 2) (* 4 a c)) 0
                                (/ -b (* 2 a))
                                cond(> (- (expt b 2) (* 4 a c)) 0
                                    (values (/ (+ -b (sqrt - (expt b 2) (* 4 a c))) (* 2 a))
                                            (/ (- -b (sqrt - (expt b 2) (* 4 a c))) (* 2 a)))
                                    (write "la discriminante es negativa y tiene raices complejas")))))
                                    
A diferencia de utilizar IF, cuando se utiliza "cond" se puede permitir mas de una condicional para evaluar, es decir que con un if se evalua tan solo lo que esta dentro de un bloque de parentesis, mientras que con cond se puede evaluar mas de un bloque.

4. Write a Scheme function that takes two numeric parameters, A and B, and returns A raised to the B power.
(define (pow A B)
  (expt A B))
  
5. Write a Scheme function that returns the number of zeros in a given simple list of numbers.
(define (ceros lst)
  (let loop ((lst lst)
             (count 0))
    (cond ((null? lst) count)
          ((zero? (car lst)) (loop (cdr lst) (+ count 1)))
          (else (loop (cdr lst) count)))))

6. Write a Scheme function that takes a simple list of numbers as a parameter and returns a list with the largest and smallest numbers in the input list.
(define (max lst)
  (if (null? lst) 
      (display "error")                
      (let loop ((lst (cdr lst))   
                 (ma (car lst)))  
        (cond ((null? lst) ma)
              ((> (car lst) ma)   
               (loop (cdr lst) (car lst))) 
              (else                      
               (loop (cdr lst) ma))))))   
               
(define (min lst)
  (if (null? lst) 
      (display "error")                
      (let loop ((lst (cdr lst))   
                 (mi (car lst)))  
        (cond ((null? lst) mi)
              ((< (car lst) mi)   
               (loop (cdr lst) (car lst))) 
              (else                      
               (loop (cdr lst) mi))))))  
              
7. Write a Scheme function that takes a list and an atom as parameters and returns a list identical to its parameter list except with all top-level instances of the given atom deleted.
(define borrar
  (lambda (a lst)
    (cond
     ((equal? a (car lst)) (cdr lst))
     (else (cons (car lst) (borrar a (cdr lst)))))))
     
8. Write a Scheme function that takes a list as a parameter and returns a list identical to the parameter except the last element has been deleted.
(define (popback lst)
    (if (null? (cdr lst))
        '()
        (cons (car lst) (popback (cdr lst)))))
        
9. Repeat Programming Exercise 7, except that the atom can be either an atom or a list.

10. Write a Scheme function that takes two atoms and a list as parameters and returns a list identical to the parameter list except all occurrences of the first given atom in the list are replaced with the second given atom, no matter how deeply the first atom is nested.
(define replace 
    (lambda (lst a b) 
        (if (eqv? lst a)
            b
            (if (null? lst)
                '() 

                (if (equal? a (car lst))
                    (cons b (replace (cdr lst) a b))

                    (cons (car lst)
                    (replace (cdr lst) a b)))))))
                    
11. Write a Scheme function that returns the reverse of its simple list parameter.
(define (reverse lst)
  (if (null? lst)
     nil
     (append (reverse (cdr lst)) (list (car lst)))))
     
12. Write a Scheme predicate function that tests for the structural equality of two given lists. Two lists are structurally equal if they have the same list structure, although their atoms may be different.

13. Write a Scheme function that returns the union of two simple list parameters that represent sets.
(define (concat lst lst2)
    (cons lst lst2))
    
14. Write a Scheme function with two parameters, an atom and a list, that returns a list identical to the parameter list except with all occurrences, no matter how deep, of the given atom deleted. The returned list cannot contain anything in place of the deleted atoms.
(define borrar
  (lambda (a lst)
    (cond
     ((equal? a (car lst)) (cdr lst))
     (else (cons (car lst) (borrar a (cdr lst)))))))
     
15. Write a Scheme function that takes a list as a parameter and returns a list identical to the parameter list except with the second top-level element removed. If the given list does not have two elements, the function should return ().
(define (delete lst n)
  (if (= n 0) 
      (cdr lst)
      (append (list (car lst)) (delete (cdr lst) (- n 1st)))))

(define (delete2 lst)
  (delete-n lst 2))
  



